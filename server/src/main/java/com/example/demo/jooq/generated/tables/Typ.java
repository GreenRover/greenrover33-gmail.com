/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.generated.tables;


import com.example.demo.jooq.generated.Keys;
import com.example.demo.jooq.generated.Public;
import com.example.demo.jooq.generated.tables.records.TypRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Typ extends TableImpl<TypRecord> {

    private static final long serialVersionUID = 487940869;

    /**
     * The reference instance of <code>public.typ</code>
     */
    public static final Typ TYP = new Typ();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypRecord> getRecordType() {
        return TypRecord.class;
    }

    /**
     * The column <code>public.typ.id</code>.
     */
    public final TableField<TypRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.typ.name</code>.
     */
    public final TableField<TypRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.typ</code> table reference
     */
    public Typ() {
        this(DSL.name("typ"), null);
    }

    /**
     * Create an aliased <code>public.typ</code> table reference
     */
    public Typ(String alias) {
        this(DSL.name(alias), TYP);
    }

    /**
     * Create an aliased <code>public.typ</code> table reference
     */
    public Typ(Name alias) {
        this(alias, TYP);
    }

    private Typ(Name alias, Table<TypRecord> aliased) {
        this(alias, aliased, null);
    }

    private Typ(Name alias, Table<TypRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Typ(Table<O> child, ForeignKey<O, TypRecord> key) {
        super(child, key, TYP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TypRecord> getPrimaryKey() {
        return Keys.TYP_PKEY;
    }

    @Override
    public List<UniqueKey<TypRecord>> getKeys() {
        return Arrays.<UniqueKey<TypRecord>>asList(Keys.TYP_PKEY);
    }

    @Override
    public Typ as(String alias) {
        return new Typ(DSL.name(alias), this);
    }

    @Override
    public Typ as(Name alias) {
        return new Typ(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Typ rename(String name) {
        return new Typ(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Typ rename(Name name) {
        return new Typ(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
